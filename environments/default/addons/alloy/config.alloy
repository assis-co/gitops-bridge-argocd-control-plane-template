// crash course https://grafana.com/docs/alloy/latest/get-started/components/#components
// TLDR Grafana's attempt at their own terraform-ish syntax for config

// livedebugging {
//   enabled = sys.env("OBS_LIVE_DEBUGGING_ENABLED")
// }

logging {
  level = "info"
  format = "logfmt"
}
// https://grafana.com/docs/alloy/latest/collect/opentelemetry-to-lgtm-stack/
otelcol.receiver.otlp "router" {
  grpc {
    endpoint = sys.env("OBS_RECEIVER_OTLP_GRPC_ENDPOINT")
  }

  http {
    endpoint = sys.env("OBS_RECEIVER_OTLP_HTTP_ENDPOINT")
  }

  output {
    metrics = [otelcol.processor.batch.forwarder.input]
    logs    = [otelcol.processor.batch.forwarder.input]
    traces  = [otelcol.processor.batch.forwarder.input]
  }
}

otelcol.processor.batch "forwarder" {
  output {
    metrics = [otelcol.exporter.prometheus.grafana_mgmt_metrics.input]
    logs    = [otelcol.exporter.loki.grafana_mgmt_logs.input]
    traces  = [otelcol.exporter.otlp.grafana_mgmt_traces.input]
  }
}

otelcol.exporter.otlp "grafana_mgmt_traces" {
	client {
		endpoint = sys.env("OBS_TEMPO_MGMT_REMOTE_WRITE_URL")
		auth     = otelcol.auth.basic.grafana_mgmt_traces.handler
	}
}

// TODO: remove basic auth and switch to service account auth
otelcol.auth.basic "grafana_mgmt_traces" {
	username = sys.env("OBS_GRAFANA_MGMT_API_USERNAME")
	password = sys.env("OBS_GRAFANA_MGMT_API_KEY")
}

otelcol.exporter.prometheus "grafana_mgmt_metrics" {
    forward_to = [prometheus.remote_write.grafana_mgmt_metrics.receiver]
}

prometheus.remote_write "grafana_mgmt_metrics" {
    endpoint {
        url = sys.env("OBS_PROMETHEUS_MGMT_REMOTE_WRITE_URL")

        // basic_auth {
        //     username = sys.env("OBS_GRAFANA_MGMT_API_USERNAME")
        //     password = sys.env("OBS_GRAFANA_MGMT_API_KEY")
        // }
    }
}

otelcol.exporter.loki "grafana_mgmt_logs" {
	forward_to = [loki.write.grafana_mgmt_logs.receiver]
}

loki.write "grafana_mgmt_logs" {
	endpoint {
		url = sys.env("OBS_LOKI_MGMT_REMOTE_WRITE_URL")

		// basic_auth {
		// 	username = sys.env("OBS_GRAFANA_MGMT_API_USERNAME")
		// 	password = sys.env("OBS_GRAFANA_MGMT_API_KEY")
		// }
	}
}
// k8s logs https://grafana.com/docs/alloy/latest/collect/logs-in-kubernetes/
// System Logs
// local.file_match discovers files on the local filesystem using glob patterns and the doublestar library. It returns an array of file paths.
local.file_match "node_logs" {
  path_targets = [{
      // Monitor syslog to scrape node-logs
      __path__  = "/var/log/syslog",
      job       = "node/syslog",
      node_name = sys.env("HOSTNAME"),
      cluster   = sys.env("CLUSTER_NAME"),
  }]
}

// loki.source.file reads log entries from files and forwards them to other loki.* components.
// You can specify multiple loki.source.file components by giving them different labels.
loki.source.file "node_logs" {
  targets    = local.file_match.node_logs.targets
  forward_to = [loki.write.grafana_mgmt_logs.receiver]
}

// Pod Logs
// discovery.kubernetes allows you to find scrape targets from Kubernetes resources.
// It watches cluster state and ensures targets are continually synced with what is currently running in your cluster.
discovery.kubernetes "pod" {
  role = "pod"
}

// discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
// If no rules are defined, then the input targets are exported as-is.
discovery.relabel "pod_logs" {
  targets = discovery.kubernetes.pod.targets

  // Label creation - "namespace" field from "__meta_kubernetes_namespace"
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }

  // Label creation - "pod" field from "__meta_kubernetes_pod_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }

  // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "container"
  }

  // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    action = "replace"
    target_label = "app"
  }

  // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
  // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
  rule {
    source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "job"
    separator = "/"
    replacement = "$1"
  }

  // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
  // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "__path__"
    separator = "/"
    replacement = "/var/log/pods/*$1/*.log"
  }

  // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
  rule {
    source_labels = ["__meta_kubernetes_pod_container_id"]
    action = "replace"
    target_label = "container_runtime"
    regex = "^(\\S+):\\/\\/.+$"
    replacement = "$1"
  }
}

// loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
loki.source.kubernetes "pod_logs" {
  targets    = discovery.relabel.pod_logs.output
  forward_to = [loki.process.pod_logs.receiver]
}

// loki.process receives log entries from other Loki components, applies one or more processing stages,
// and forwards the results to the list of receivers in the component’s arguments.
loki.process "pod_logs" {
  stage.static_labels {
      values = {
        cluster = sys.env("CLUSTER_NAME"),
      }
  }

  forward_to = [loki.write.grafana_mgmt_logs.receiver]
}

// Cluster Events
// loki.source.kubernetes_events tails events from the Kubernetes API and converts them
// into log lines to forward to other Loki components.
loki.source.kubernetes_events "cluster_events" {
  job_name   = "integrations/kubernetes/eventhandler"
  log_format = "logfmt"
  forward_to = [
    loki.process.cluster_events.receiver,
  ]
}

// loki.process receives log entries from other loki components, applies one or more processing stages,
// and forwards the results to the list of receivers in the component’s arguments.
loki.process "cluster_events" {
  forward_to = [loki.write.grafana_mgmt_logs.receiver]

  stage.static_labels {
    values = {
      cluster = sys.env("CLUSTER_NAME"),
    }
  }

  stage.labels {
    values = {
      kubernetes_cluster_events = "job",
    }
  }
}

// Beyla / auto-instrumentation for apps https://grafana.com/docs/beyla/latest/
// https://grafana.com/docs/beyla/latest/tutorial/helm-alloy/
// beyla.ebpf "collector" {
// 	attributes {
// 		kubernetes {
// 			enable = "true"
// 		}
// 	}

// 	discovery {
// 		services {
//       kubernetes {
//         // TODO: make this configurable via env vars / get actual namespaces
// 				namespace = "modelhub"
// 				deployment_name = "."
//       }
// 		}
// 	}

// 	metrics {
// 		features = [
// 			"application",
// 		]
// 	}

// 	output {
// 		traces = [otelcol.exporter.otlp.grafana_mgmt_traces.input]
// 	}
// }

// prometheus.scrape "beyla" {
// 	targets      = beyla.ebpf.collector.targets
// 	honor_labels = true
// 	forward_to   = [prometheus.remote_write.grafana_mgmt_metrics.receiver]
// }